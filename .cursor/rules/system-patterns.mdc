---
description: 
globs: 
alwaysApply: true
---
# AI学习助手 - 系统模式

## 系统架构

### 整体架构
```mermaid
graph TD
    A[前端UI层] --> B[业务逻辑层]
    B --> C[数据访问层]
    B --> D[本地存储层]
    B --> E[AI服务层]
    C --> F[GitHub API]
    D --> G[SQLite]
    E --> H[OpenAI API]
```

### 核心模块
1. **UI层**
   - React组件系统
   - 路由管理
   - 状态管理

2. **业务逻辑层**
   - 项目管理
   - 学习追踪
   - 用户偏好

3. **数据层**
   - API服务
   - 本地存储
   - 缓存系统

## 关键技术决策

### 1. 框架选择
- **Tauri**
  - 原因：轻量、性能好、原生感强
  - 优势：小体积、资源占用低
  - 权衡：生态相对较新

- **React**
  - 原因：熟悉、生态丰富
  - 优势：组件化、状态管理
  - 集成：与Tauri完美配合

### 2. 状态管理
- **Zustand**
  - 原因：轻量简单
  - 特点：
    - 简单的API
    - 良好的TypeScript支持
    - 模块化状态管理

### 3. 数据获取
- **TanStack Query**
  - 原因：强大的缓存和同步
  - 特点：
    - 自动缓存
    - 后台更新
    - 错误处理

### 4. 本地存储
- **SQLite**
  - 原因：可靠的本地数据库
  - 用途：
    - 项目数据
    - 用户配置
    - 学习记录

## 设计模式

### 1. 组件设计
```typescript
// 组件结构示例
interface ComponentProps {
  data: ProjectData;
  onAction: (id: string) => void;
  config?: ConfigOptions;
}

const Component: React.FC<ComponentProps> = ({
  data,
  onAction,
  config = defaultConfig
}) => {
  // 组件实现
};
```

### 2. 数据流模式
```typescript
// 状态管理示例
interface ProjectStore {
  projects: Project[];
  favorites: string[];
  addFavorite: (id: string) => void;
  removeFavorite: (id: string) => void;
}

const useProjectStore = create<ProjectStore>((set) => ({
  projects: [],
  favorites: [],
  addFavorite: (id) => set((state) => ({
    favorites: [...state.favorites, id]
  })),
  removeFavorite: (id) => set((state) => ({
    favorites: state.favorites.filter(fid => fid !== id)
  }))
}));
```

### 3. 服务模式
```typescript
// API服务示例
class GitHubService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: 'https://api.github.com'
    });
  }

  async searchProjects(query: string): Promise<Project[]> {
    // 实现搜索逻辑
  }

  async getProjectDetails(id: string): Promise<ProjectDetails> {
    // 实现详情获取
  }
}
```

## 关键实现路径

### 1. 数据同步流程
```mermaid
sequenceDiagram
    participant UI
    participant Store
    participant API
    participant Cache
    
    UI->>Store: 请求数据
    Store->>Cache: 检查缓存
    Cache-->>Store: 返回缓存数据
    Store->>API: 请求新数据
    API-->>Store: 返回新数据
    Store->>Cache: 更新缓存
    Store-->>UI: 更新界面
```

### 2. 离线功能流程
```mermaid
sequenceDiagram
    participant User
    participant App
    participant LocalDB
    participant Network
    
    User->>App: 请求数据
    App->>LocalDB: 检查本地数据
    LocalDB-->>App: 返回本地数据
    App->>Network: 检查网络
    alt 有网络
        Network-->>App: 同步数据
        App->>LocalDB: 更新本地数据
    else 无网络
        App-->>User: 使用本地数据
    end
```

## 组件关系

### 1. 页面组件
```mermaid
graph TD
    A[App] --> B[HomePage]
    A --> C[ProjectsPage]
    A --> D[DetailPage]
    B --> E[SearchBar]
    B --> F[ProjectList]
    C --> G[FilterPanel]
    C --> H[ProjectGrid]
    D --> I[MarkdownViewer]
    D --> J[CodeViewer]
```

### 2. 功能组件
```mermaid
graph TD
    A[ProjectCard] --> B[ImageLoader]
    A --> C[StarCounter]
    D[SearchBar] --> E[AutoComplete]
    F[MarkdownViewer] --> G[CodeHighlighter]
    F --> H[ImageViewer]
```

## 技术约束

### 1. 性能约束
- 启动时间 < 2秒
- 内存使用 < 200MB
- 响应时间 < 100ms

### 2. 兼容性约束
- macOS 10.15+
- Node.js 18+
- Rust 1.70+

### 3. 网络约束
- GitHub API限流处理
- 断网降级策略
- 数据同步机制

## 安全考虑

### 1. 数据安全
- 本地数据加密
- 敏感信息保护
- 安全存储机制

### 2. API安全
- Token管理
- 请求签名
- 错误处理

### 3. 应用安全
- 更新机制
- 完整性校验
- 权限控制

## 扩展性设计

### 1. 插件系统
```typescript
interface Plugin {
  name: string;
  version: string;
  activate: () => void;
  deactivate: () => void;
}

class PluginManager {
  private plugins: Map<string, Plugin>;

  registerPlugin(plugin: Plugin) {
    // 插件注册逻辑
  }

  activatePlugin(name: string) {
    // 插件激活逻辑
  }
}
```

### 2. 主题系统
```typescript
interface Theme {
  name: string;
  colors: {
    primary: MantineColorsTuple;
    [key: string]: MantineColorsTuple;
  };
  spacing: {
    xxs: string; // 4px
    xs: string;  // 8px
    sm: string;  // 12px
    md: string;  // 16px
    lg: string;  // 24px
    xl: string;  // 32px
    xxl: string; // 48px
  };
  typography: {
    fontSizes: {
      xs: string; // 12px
      sm: string; // 13px
      md: string; // 14px - base
      lg: string; // 16px
      xl: string; // 18px
    };
  };
  radius: {
    xs: string; // 2px
    sm: string; // 4px - default
    md: string; // 8px
    lg: string; // 16px
    xl: string; // 32px
  };
  transitions: {
    duration: string;   // 0.2s
    timing: string;     // ease
  };
}

class ThemeManager {
  private currentTheme: Theme;
  private colorScheme: 'light' | 'dark';

  constructor() {
    this.colorScheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  setTheme(theme: Theme) {
    this.currentTheme = theme;
    this.applyTheme();
  }

  toggleColorScheme() {
    this.colorScheme = this.colorScheme === 'light' ? 'dark' : 'light';
    this.applyTheme();
  }

  private applyTheme() {
    // 应用主题逻辑
  }
}
```
- **主题适配**
  - 所有 UI 组件（如 ProjectCard）在生成和维护代码时，样式（如文字颜色、背景色、阴影、分割线等）必须适配明暗主题。
  - 应通过 Mantine 的 useMantineColorScheme 或 theme 变量动态切换颜色，避免写死颜色值。
  - 生成代码时需自动考虑 colorScheme，保证在 light/dark 下均有良好观感和可读性。

### 3. 样式系统
```typescript
// 全局样式管理
interface GlobalStyles {
  // 重置样式
  reset: {
    margin: 0;
    padding: 0;
    boxSizing: 'border-box';
  };

  // 基础字体设置
  typography: {
    fontSize: '14px';
    fontSmoothing: 'antialiased';
  };

  // 动画过渡
  transitions: {
    default: 'all 0.2s ease';
  };

  // 响应式设计
  breakpoints: {
    xs: '576px';
    sm: '768px';
    md: '992px';
    lg: '1200px';
    xl: '1400px';
  };
}

// 组件样式接口
interface ComponentStyles {
  base: CSSProperties;
  variants: Record<string, CSSProperties>;
  states: {
    hover?: CSSProperties;
    active?: CSSProperties;
    disabled?: CSSProperties;
  };
  darkMode?: CSSProperties;
}
```

### 4. 国际化
```typescript
interface I18nManager {
  locale: string;
  messages: Record<string, string>;
  
  setLocale(locale: string): void;
  translate(key: string, params?: object): string;
}
```

## 监控和日志

### 1. 性能监控
```typescript
interface PerformanceMetrics {
  startupTime: number;
  memoryUsage: number;
  responseTime: number;
}

class PerformanceMonitor {
  collectMetrics(): PerformanceMetrics {
    // 收集性能指标
  }

  reportMetrics(metrics: PerformanceMetrics) {
    // 报告性能数据
  }
}
```

### 2. 错误追踪
```typescript
interface ErrorReport {
  type: string;
  message: string;
  stack?: string;
  context?: object;
}

class ErrorTracker {
  trackError(error: Error, context?: object) {
    // 错误追踪逻辑
  }

  reportError(report: ErrorReport) {
    // 错误报告逻辑
  }
}
```

### 3. 用户行为
```typescript
interface UserAction {
  type: string;
  timestamp: number;
  data?: object;
}

class ActionTracker {
  trackAction(action: UserAction) {
    // 行为追踪逻辑
  }

  generateReport(): ActionReport {
    // 生成报告
  }
}
```

## 代码规范和模块化

### 1. 模块化原则
```typescript
// 目录结构示例
src/
  ├── components/        // UI组件
  │   ├── common/       // 通用组件
  │   ├── layout/       // 布局组件
  │   └── features/     // 功能组件
  ├── hooks/            // 自定义Hooks
  ├── services/         // 服务层
  ├── stores/           // 状态管理
  ├── utils/            // 工具函数
  └── pages/            // 页面组件

// 模块拆分原则
- 单文件不超过500行
- 按功能职责拆分
- 保持高内聚低耦合
```

### 2. 命名规范
```typescript
// 文件命名
components/
  Button.tsx           // 组件文件：大驼峰
  useWindowSize.ts     // Hook文件：use前缀
  api-service.ts       // 服务文件：小写中划线
  types.d.ts          // 类型声明文件

// 变量命名
const userList: User[] = [];          // 名词：小驼峰
const isLoading: boolean = false;     // 布尔值：is/has/should前缀
const MAX_RETRY_COUNT = 3;            // 常量：大写下划线
const handleSubmit = () => {};        // 事件处理：handle前缀

// 组件命名
interface ButtonProps {               // Props接口：组件名 + Props
  variant: 'primary' | 'secondary';
  onClick: () => void;
}

const Button: React.FC<ButtonProps> = ({ variant, onClick }) => {
  // 组件实现
};
```

### 3. JSDoc注释规范
```typescript
/**
 * 项目卡片组件
 * @component
 * @example
 * ```tsx
 * <ProjectCard
 *   project={projectData}
 *   onFavorite={handleFavorite}
 * />
 * ```
 */
interface ProjectCardProps {
  /** 项目数据对象 */
  project: Project;
  /** 收藏回调函数 */
  onFavorite: (id: string) => void;
}

/**
 * 获取GitHub项目信息
 * @async
 * @param {string} owner - 仓库所有者
 * @param {string} repo - 仓库名称
 * @returns {Promise<Project>} 项目信息
 * @throws {Error} 当API请求失败时抛出
 */
async function getProjectInfo(owner: string, repo: string): Promise<Project> {
  // 实现逻辑
}
```

### 4. 模块接口设计
```typescript
// 定义清晰的模块接口
export interface ProjectService {
  /** 搜索项目 */
  search(query: string): Promise<Project[]>;
  /** 获取项目详情 */
  getDetails(id: string): Promise<ProjectDetails>;
  /** 更新项目信息 */
  update(id: string, data: Partial<Project>): Promise<void>;
}

// 实现与接口分离
class GitHubProjectService implements ProjectService {
  // 实现接口定义的方法
}
```

### 5. 代码组织模式
```typescript
// 特性模块组织
feature/
  ├── components/      // 特性相关组件
  ├── hooks/           // 特性相关hooks
  ├── services/        // 特性相关服务
  ├── stores/          // 特性相关状态
  ├── types.ts         // 类型定义
  └── index.ts         // 统一导出

// 统一导出模式
export * from './components';
export * from './hooks';
export * from './services';
export type * from './types';
```

### 6. 错误处理模式
```typescript
// 统一错误类型
export class AppError extends Error {
  constructor(
    message: string,
    public code: string,
    public details?: unknown
  ) {
    super(message);
    this.name = 'AppError';
  }
}

// 错误处理中间件
const errorHandler = (error: unknown) => {
  if (error instanceof AppError) {
    // 处理应用错误
  } else if (error instanceof AxiosError) {
    // 处理网络错误
  } else {
    // 处理未知错误
  }
};
```

### 7. 性能优化模式
```typescript
// 组件优化
const MemoizedComponent = React.memo(({ data }) => {
  // 组件实现
}, (prevProps, nextProps) => {
  // 自定义比较逻辑
});

// 数据缓存
const useCachedData = (key: string) => {
  return useQuery({
    queryKey: [key],
    queryFn: fetchData,
    staleTime: 5 * 60 * 1000,
    cacheTime: 30 * 60 * 1000
  });
};

// 代码分割
const LazyComponent = React.lazy(() => import('./HeavyComponent'));
```

### 8. 测试模式
```typescript
// 组件测试
describe('ProjectCard', () => {
  it('应该正确渲染项目信息', () => {
    const project = mockProject();
    render(<ProjectCard project={project} />);
    expect(screen.getByText(project.name)).toBeInTheDocument();
  });
});

// 服务测试
describe('ProjectService', () => {
  it('应该正确获取项目信息', async () => {
    const service = new ProjectService();
    const result = await service.getDetails('123');
    expect(result).toMatchSnapshot();
  });
});
```

### 9. 状态管理模式
```typescript
// 状态切片
interface ProjectSlice {
  projects: Project[];
  setProjects: (projects: Project[]) => void;
  addProject: (project: Project) => void;
}

// 状态组合
interface AppStore extends
  ProjectSlice,
  UserSlice,
  SettingsSlice {}

// 状态访问
const useProjects = () => {
  const store = useStore();
  return {
    projects: store.projects,
    addProject: store.addProject
  };
};
```

### 10. 安全模式
```typescript
// 输入验证
const validateInput = (data: unknown): data is ProjectInput => {
  // 验证逻辑
};

// XSS防护
const sanitizeHtml = (html: string): string => {
  // 清理HTML
};

// 类型防护
function assertIsProject(value: unknown): asserts value is Project {
  // 类型断言逻辑
}
``` 